#!/usr/bin/perl -w

# Copyright (C) 2005 Peter Palfrader <peter@palfrader.org>
# Porting to hobbit Copyright (C) 2007 Christoph Berg <myon@debian.org>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

use strict;
use English;

$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $LSOF = '/usr/bin/lsof';

my %processes;

sub bb ($$)
{
	my $color = shift;
	my $message = shift;
	my $date = scalar localtime;
	my $hostname = `hostname -f`;
	chomp $hostname;

	open BB, "| $ENV{BB} $ENV{BBDISP} @" or die;
	print BB "status $ENV{CLIENTHOSTNAME}.libs $color $date\n\n$message\n";
	close BB;
	exit 0;
}

sub getPIDs($$) {
	my ($user, $process) = @_;
	return join(' ', sort keys %{ $processes{$user}->{$process} });
};
sub getProcs($) {
	my ($user) = @_;

	return join("\n", map { "  $_ (".getPIDs($user, $_).')' } (sort {$a cmp $b} keys %{ $processes{$user} }));
};
sub getUsers() {
	return join("\n", (map { "$_:\n".getProcs($_) } (sort {$a cmp $b} keys %processes)));
};
sub inVserver() {
	open(F, "< /proc/self/status") or return 0;
	while (<F>) {
		my ($k, $v) = split(/: */, $_, 2);
		if ($k eq 's_context') {
			close F;
			return ($v > 0);
		};
	};
	close F;
	return 0;
}

my $message;
my $INVSERVER = inVserver();

if (! -x $LSOF) {
	bb ('clear', "$LSOF not found");
}

unless (open (LSOF, "$LSOF -n 2> /dev/null|")) {
	bb ('clear', "executing lsof failed: $CHILD_ERROR");
}
my @lsof=<LSOF>;
close LSOF;
if ($CHILD_ERROR) { # program failed
	bb ('clear', "lsof returned: $CHILD_ERROR");
};

for my $line (@lsof)  {
	if ($line =~ m/\.dpkg-/ || $line =~ m/path inode=/) {
		my ($process, $pid, $user, undef, undef, undef, undef, $path, $rest) = split /\s+/, $line;
		next if $path =~ m#^/proc/#;
		next if ($INVSERVER && ($process eq 'init') && ($pid == 1) && ($user eq 'root'));
		#$processes{$user}->{$process} = [] unless defined $processes{$user}->{$process};
		$processes{$user}->{$process}->{$pid} = 1;
	};
};



if (keys %processes) {
	bb ('yellow', "The following processes have libs linked that were upgraded:\n". getUsers());
} else {
	bb ('green', 'No upgraded libs linked in running processes');
};
